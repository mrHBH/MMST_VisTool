function rev(added, deleted, belonged, derived, revnum) 
{
    this.added 		= added;
    this.deleted 	= deleted;
    this.belonged 	= belonged;
    this.derived 	= derived;
    this.revnum 	= revnum;
}

function revnum(txt)
{
	var lgnt = txt.length;
	var count = 0;
	var pos = 0;
	var temp = 0;
	var i = 0;
	
	// cleaning the text from white characters
	txt = txt.replace(/ /g, "");			//erase spaces
	txt = txt.replace(/&lt;/g, "");			//erase <
	txt = txt.replace(/&gt;/g, "");			//erase >
	txt = txt.replace(/&quot;/g, "");		//erase "
	
	// finding the number of the rev
	for (i = 0; i < lgnt; i++)
	{
		pos = txt.indexOf("revisionNumber", temp);
		if (pos != -1)
		{
		    temp = pos + 1;
		    count++;
		}
	}
	
	return count;
}

function parse(txt, revcount)
{
  // finding the revision info
  var revision = new rev()[count];
  var temptxt = 0;
  var pos1 = 0;
  var pos2 = 0;

  // cleaning the text from white characters
  txt = txt.replace(/ /g, "");			//erase spaces
  txt = txt.replace(/&lt;/g, "");		//erase <
  txt = txt.replace(/&gt;/g, "");		//erase >
  txt = txt.replace(/&quot;/g, "");		//erase "

  txt = txt.split("rmo:Revision;");		// converting the text into array

  for (i = 0; i < count; i++)
  {
      temptxt = txt[i]

      pos1 = temptxt.indexOf("addSet", pos2);
      if (pos1 != -1)
      {
        pos2 = temptxt.indexOf(";", (pos1 + 7));
        revision[i].added = temptxt.slice((pos1 + 7), (pos2 - 1));
      }
      else
      {
        revision[i].added = "";
      }

      pos1 = temptxt.indexOf("belongsTo", pos2);
      if (pos1 != -1)
      {
        pos2 = temptxt.indexOf(";", (pos1 + 10));
        revision[i].belonged = temptxt.slice((pos1 + 10), (pos2 - 1));
      }
      else
      {
        revision[i].added = "";
      }

      pos1 = temptxt.indexOf("deleteSet", pos2);
      if (pos1 != -1)
      {
        pos2 = temptxt.indexOf(";", (pos1 + 10));
        revision[i].deleted = temptxt.slice((pos1 + 10), (pos2 - 1));
      }
      else
      {
        revision[i].added = "";
      }

      pos1 = temptxt.indexOf("revisionNumber", pos2);
      if (pos1 != -1)
      {
        revision[i].revnum = temptxt.slice((pos1 + 14), (pos1 + 15));
      }
      else
      {
        revision[i].added = "";
      }

      pos1 = temptxt.indexOf("wasDerivedFrom", pos2);
      if (pos1 != -1)
      {
        pos2 = temptxt.indexOf(".h", (pos1 + 14));
        revision[i].derived = temptxt.slice((pos1 + 14), (pos2 - 1));
      }
      else
      {
        revision[i].added = "";
      }
  }
  
  return revision;
}